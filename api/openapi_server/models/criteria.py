# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.criteria_all_of import CriteriaAllOf
from openapi_server.models.predicate import Predicate
from openapi_server.models.subject import Subject
from openapi_server import util

from openapi_server.models.criteria_all_of import CriteriaAllOf  # noqa: E501
from openapi_server.models.predicate import Predicate  # noqa: E501
from openapi_server.models.subject import Subject  # noqa: E501

class Criteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name='criteria', subject=None, predicate=None, object=None):  # noqa: E501
        """Criteria - a model defined in OpenAPI

        :param name: The name of this Criteria.  # noqa: E501
        :type name: str
        :param subject: The subject of this Criteria.  # noqa: E501
        :type subject: Subject
        :param predicate: The predicate of this Criteria.  # noqa: E501
        :type predicate: Predicate
        :param object: The object of this Criteria.  # noqa: E501
        :type object: str
        """
        self.openapi_types = {
            'name': str,
            'subject': Subject,
            'predicate': Predicate,
            'object': str
        }

        self.attribute_map = {
            'name': 'name',
            'subject': 'subject',
            'predicate': 'predicate',
            'object': 'object'
        }

        self._name = name
        self._subject = subject
        self._predicate = predicate
        self._object = object

    @classmethod
    def from_dict(cls, dikt) -> 'Criteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Criteria of this Criteria.  # noqa: E501
        :rtype: Criteria
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Criteria.


        :return: The name of this Criteria.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Criteria.


        :param name: The name of this Criteria.
        :type name: str
        """

        self._name = name

    @property
    def subject(self):
        """Gets the subject of this Criteria.


        :return: The subject of this Criteria.
        :rtype: Subject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Criteria.


        :param subject: The subject of this Criteria.
        :type subject: Subject
        """

        self._subject = subject

    @property
    def predicate(self):
        """Gets the predicate of this Criteria.


        :return: The predicate of this Criteria.
        :rtype: Predicate
        """
        return self._predicate

    @predicate.setter
    def predicate(self, predicate):
        """Sets the predicate of this Criteria.


        :param predicate: The predicate of this Criteria.
        :type predicate: Predicate
        """

        self._predicate = predicate

    @property
    def object(self):
        """Gets the object of this Criteria.


        :return: The object of this Criteria.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Criteria.


        :param object: The object of this Criteria.
        :type object: str
        """

        self._object = object
