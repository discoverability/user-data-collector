swagger: "2.0"
info:
  version: "1.0.0"
  title: "Netflix Sniffer"
tags:
- name: "Consumption"
  description: "Everything about your Consumptions"
- name: "Recommandation"
  description: "Everything about your Recommandations"
- name: "Account"
  description: "Everything about your Account"
- name: "Movies"
  description: "Everything about your Movies"

schemes:
- "https"
- "http"
paths:

  /consumption:
    post:
      tags:
      - "Consumption"
      summary: "Add a new consumption to the account"
      description: ""
      operationId: "addConsumption"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "idMovie"
        in: "header"
        description: "id Movie"
        required: false
        type: "integer"
        format: "int32"
      - name: "idAccount"
        in: "header"
        description: "id Account"
        required: false
        type: "integer"
        format: "int32"
      - in: "body"
        name: "body"
        description: "Conso object that needs to be added to the account"
        required: true
        schema:
          $ref: "#/definitions/consumption"
      responses:
        405:
          description: "Invalid input"
  /consumption/{idConso}:
    get:
      tags:
      - "Consumption"
      summary: "Find Consumption by ID"
      description: "Returns a consumption"
      operationId: "getConsumptionById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "idConso"
        in: "path"
        description: "ID of consumption to return"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/consumption"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Consumption not found"
      security:
      - api_key: []
      
      
  /consumption/findByDate:
    get:
      tags:
      - "Consumption"
      summary: "Finds consumption by date"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "date"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/consumption"
        400:
          description: "Invalid date value"
          
  /consumption/findByCountries:
    get:
      tags:
      - "Consumption"
      summary: "Finds recommandation by countries"
      description: "Multiple countries values can be provided with comma separated strings"
      operationId: "findComsumptionByCountries"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "countries"
        in: "query"
        description: "Countries values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "integer"
          
        collectionFormat: "multi"
        
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/consumption"
        400:
          description: "Invalid countries value"
        
        
  /recommandation:     
    post:
        tags:
        - "Recommandation"
        summary: "Add a new recommandation to the account"
        description: ""
        operationId: "addRecommandation"
        consumes:
        - "application/json"
        - "application/xml"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "idMovie"
          in: "header"
          description: "id Movie"
          required: false
          type: "integer"
          format: "int32"
        - name: "UUID"
          in: "header"
          description: "UUID"
          required: false
          type: "string"
        - in: "body"
          name: "body"
          description: "Recommandation object that needs to be added to the account"
          required: true
          schema:
            $ref: "#/definitions/recommandation"
        responses:
          405:
            description: "Invalid input"    
            
  /recommandation/{idReco}:
    get:
      tags:
      - "Recommandation"
      summary: "Find recommandation by ID"
      description: "Returns a recommandation"
      operationId: "getrecommandationById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "idReco"
        in: "path"
        description: "ID of recommandation to return"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/recommandation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Recommandation not found"
      security:
      - api_key: []
      
      
  /recommandation/findByDate:
    get:
      tags:
      - "Recommandation"
      summary: "Finds recommandation by date"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findRecommandationByDate"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "date"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/recommandation"
        400:
          description: "Invalid date value"
          
  /recommandation/findByCountries:
    get:
      tags:
      - "Recommandation"
      summary: "Finds recommandation by countries"
      description: "Multiple countries values can be provided with comma separated strings"
      operationId: "findRecommandationByCountries"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "countries"
        in: "query"
        description: "Countries values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "integer"
          
        collectionFormat: "multi"
        
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/recommandation"
        400:
          description: "Invalid countries value"

  
  /movies:
    post:
      tags:
      - "Movies"
      summary: "Add a new Movie"
      description: ""
      operationId: "addMovie"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "idMovie"
        in: "header"
        description: "id Movie"
        required: false
        type: "integer"
        format: "int32"
      - name: "title"
        in: "header"
        description: "Title"
        required: false
        type: "integer"
        format: "int32"
      - name: "release"
        in: "header"
        description: "Date release"
        required: false
        type: "string"
        format: "date"
      - in: "body"
        name: "body"
        description: "Movie object that needs to be added to the account"
        required: true
        schema:
          $ref: "#/definitions/movies"
      responses:
        405:
          description: "Invalid input"
          
  /movies/{id}:
    get:
      tags:
      - "Movies"
      summary: "Find movie by ID"
      description: "Returns a movie"
      operationId: "getmovieById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of recommandation to return"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/movies"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Movie not found"
      security:
      - api_key: []
      
      
  /movies/findByDate:
    get:
      tags:
      - "Movies"
      summary: "Finds movies by date"
      description: "Multiple date values can be provided with comma separated strings"
      operationId: "findMovieByDate"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "release_at"
        in: "query"
        description: "Release date values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/movies"
        400:
          description: "Invalid date value"
    
  /movies/findByType:
    get:
      tags:
      - "Movies"
      summary: "Finds movies by types"
      description: "Multiple types values can be provided with comma separated strings"
      operationId: "findMovieByTypes"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "movies_types_id"
        in: "query"
        description: "Types values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "integer"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/movies"
        400:
          description: "Invalid type value"
  
  /movies/findByCountries:
    get:
      tags:
      - "Movies"
      summary: "Finds movies by countries"
      description: "Multiple countries values can be provided with comma separated strings"
      operationId: "findMovieByCountries"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "countries"
        in: "query"
        description: "Countries values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "integer"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/movies"
        400:
          description: "Invalid countries value"
  
  


  /account:
    post:
      tags:
      - "Account"
      summary: "Create account"
      description: "This can only be done by the logged in account."
      operationId: "createAccount"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created account object"
        required: true
        schema:
          $ref: "#/definitions/account"
      responses:
        default:
          description: "successful operation"
          
  
  
  /account/{UUID}:
    get:
      tags:
      - "Account"
      summary: "Get user by UUID"
      description: ""
      operationId: "getAccountByUUID"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        description: "The UUID that needs to be fetched. "
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/account"
        400:
          description: "Invalid UUID supplied"
        404:
          description: "Account UUID found"
    
  


securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify in your account"
      read:pets: "read"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"


definitions:
  account:
    type: "object"
    properties:
      UUID:
        type: "string"
        format: "uuid"
      location:
        items:
          $ref: "#/definitions/countries"
      Consumptions:
        type: "array"
        items:
          $ref: "#/definitions/consumption"
      Recommandations:
        type: "array"
        items:
          $ref: "#/definitions/recommandation"
    xml:
      name: "account"

  movies:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      title:
        type: "string"
      type:
        type: "integer"
        format: "int32"
      description:
        type: "string"
      release_at:
        type: "string"
        format: "datetime"
      duration:
        type: "integer"
        format: "int64"
      image:
        type: "integer"
        format: "int64"
      movie_types_id:
        type: "integer"
        format: "int32"
        items:
          $ref: "#/definitions/type"
      netflix_id:
        type: "integer"
        format: "int32"
      imdb_id:
        type: "integer"
        format: "int32"
      countries:
        type: "array"
        items:
          $ref: "#/definitions/countries"
      nationalities:
        type: "array"
        items:
          $ref: "#/definitions/nationalities"
      directors:
        type: "array"
        items:
          $ref: "#/definitions/directors"
      actors:
        type: "array"
        items:
          $ref: "#/definitions/actors"
      festivals:
        type: "array"
        items:
          $ref: "#/definitions/festival"
      academy-award:
        type: "array"
        items:
          $ref: "#/definitions/academy_award"
    xml:
      name: "movies"
      
      
  recommandation:
    type: "object"
    properties:
      idReco:
        type: "integer"
        format: "int64"
      thumb_X:
        type: "integer"
        format: "int64"
      thumb_Y:
        type: "integer"
        format: "int64"
      thumb_Z:
        type: "integer"
        format: "int64"
      id_movies:
        items:
          $ref: "#/definitions/movies"
      UUID:
        items:
          $ref: "#/definitions/account"
    xml:
      name: "reco"
        
  consumption:
    type: "object"
    properties:
      idConso:
        type: "integer"
        format: "int64"
      date_conso:
        type: "string"
        format: "datetime"
      id:
        items:
          $ref: "#/definitions/movies"
      UUID:
        items:
          $ref: "#/definitions/account"
    xml:
      name: "conso"
      
  countries:
    type: "object"
    properties:
      idCountries:
        type: "integer"
        format: "int32"
      code:
        type: "string"
    xml:
      name: "countries"
      
  directors:
    type: "object"
    properties:
      idDirector:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      gender:
        type: "boolean"
      birthday:
        type: "string"
        format: "date"
      nationalies:
        type: "array"
        items:
          $ref: "#/definitions/nationalities"
    xml:
      name: "directors"
      
  actors:
    type: "object"
    properties:
      idActors:
        type: "integer"
        format: "int32"
      name:
        type: "string"
    xml:
      name: "actors"

      
  nationalities:
    type: "object"
    properties:
      idNationalities:
        type: "integer"
        format: "int32"
      name:
        type: "string"
    xml:
      name: "nationalties"
 
  type:
    type: "object"
    properties:
      idType:
        type: "integer"
        format: "int32"
      name:
        type: "string"
    xml:
      name: "type"
      
  festival:
    type: "object"
    properties:
      idFestival:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      year:
        type: "string"
        format: "date"
      countries:
        items:
          $ref: "#/definitions/countries"
      filmss:
        type: "array"
        items:
          $ref: "#/definitions/movies"
      selectionName:
        type: "array"
        items:
          $ref: "#/definitions/festival_selection_name"
    xml:
      name: "festival"
      
  festival_selection_name:
    type: "object"
    properties:
      idFestivalSelec:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      idFestival:
        items:
          $ref: "#/definitions/festival"
    xml:
      name: "type"
      
  academy_award:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      title:
        type: "string"
      date:
        type: "string"
        format: "date"
      movie_id:
        items:
          $ref: "#/definitions/movies"
    xml:
      name: "academy_award"


  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
