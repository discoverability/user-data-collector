swagger: "2.0"
info:
  version: "1.0.0"
  title: "Netflix Sniffer"
tags:
- name: "Consumption"
  description: "Everything about your Consumptions"
- name: "Recommandation"
  description: "Everything about your Recommandations"
    
- name: "Account"
  description: "Everything about your Account"

schemes:
- "https"
- "http"
paths:

  /consumption:
    post:
      tags:
      - "Consumption"
      summary: "Add a new consumption to the account"
      description: ""
      operationId: "addConsumption"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "idMovie"
        in: "header"
        description: "id Movie"
        required: false
        type: "integer"
        format: "int64"
      - name: "idAccount"
        in: "header"
        description: "id Account"
        required: false
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Conso object that needs to be added to the account"
        required: true
        schema:
          $ref: "#/definitions/consumption"
      responses:
        405:
          description: "Invalid input"
  /consumption/{idConso}:
    get:
      tags:
      - "Consumption"
      summary: "Find Consumption by ID"
      description: "Returns a consumption"
      operationId: "getConsumptionById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "idConso"
        in: "path"
        description: "ID of consumption to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/consumption"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Consumption not found"
      security:
      - api_key: []
      
    delete:
      tags:
      - "Consumption"
      summary: "Deletes a consumption"
      description: ""
      operationId: "deleteConsumption"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "idConso"
        in: "path"
        description: "Consumption id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Consumption not found"
      
  /consumption/findByDate:
    get:
      tags:
      - "Consumption"
      summary: "Finds consumption by date"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "date"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/consumption"
        400:
          description: "Invalid date value"
        
        
  /recommandation:     
    post:
        tags:
        - "Recommandation"
        summary: "Add a new recommandation to the account"
        description: ""
        operationId: "addRecommandation"
        consumes:
        - "application/json"
        - "application/xml"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "idMovie"
          in: "header"
          description: "id Movie"
          required: false
          type: "integer"
          format: "int64"
        - name: "idAccount"
          in: "header"
          description: "id Account"
          required: false
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Recommandation object that needs to be added to the account"
          required: true
          schema:
            $ref: "#/definitions/recommandation"
        responses:
          405:
            description: "Invalid input"    
            
  /recommandation/{idReco}:
    get:
      tags:
      - "Recommandation"
      summary: "Find recommandation by ID"
      description: "Returns a recommandation"
      operationId: "getrecommandationById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "idReco"
        in: "path"
        description: "ID of recommandation to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/recommandation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Recommandation not found"
      security:
      - api_key: []
      
    delete:
      tags:
      - "Recommandation"
      summary: "Deletes a recommandation"
      description: ""
      operationId: "deleteRecommandation"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "idReco"
        in: "path"
        description: "Recommandation id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Recommandation not found"
      
  /recommandation/findByDate:
    get:
      tags:
      - "Recommandation"
      summary: "Finds recommandation by date"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findRecommandationByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "date"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/recommandation"
        400:
          description: "Invalid date value"




  /account:
    post:
      tags:
      - "Account"
      summary: "Create account"
      description: "This can only be done by the logged in account."
      operationId: "createAccount"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created account object"
        required: true
        schema:
          $ref: "#/definitions/account"
      responses:
        default:
          description: "successful operation"
          
  /account/createWithArray:
    post:
      tags:
      - "Account"
      summary: "Creates list of accounts with given input array"
      description: ""
      operationId: "createAccountsWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of account object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/account"
      responses:
        default:
          description: "successful operation"
  /account/createWithList:
    post:
      tags:
      - "Account"
      summary: "Creates list of accounts with given input array"
      description: ""
      operationId: "createAccountsWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of account object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/account"
      responses:
        default:
          description: "successful operation"
  
  /account/{UUID}:
    get:
      tags:
      - "Account"
      summary: "Get user by UUID"
      description: ""
      operationId: "getAccountByUUID"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        description: "The UUID that needs to be fetched. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/account"
        400:
          description: "Invalid UUID supplied"
        404:
          description: "Account UUID found"
    delete:
      tags:
      - "Account"
      summary: "Delete account"
      description: ""
      operationId: "deleteAccount"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "UUID"
        in: "path"
        description: "The account that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid UUID supplied"
        404:
          description: "Account not found"
  


securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"


definitions:
  account:
    type: "object"
    properties:
      UUID:
        type: "string"
      mail:
        type: "string"
      name:
         type: "string"
      
      Consumptions:
        type: "array"
        items:
          $ref: "#/definitions/consumption"
      Recommandations:
        type: "array"
        items:
          $ref: "#/definitions/recommandation"
    xml:
      name: "account"
  movies:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      type:
        type: "integer"
        format: "int64"
      description:
        type: "string"
      release_at:
        type: "string"
        format: "datetime"
      duration:
        type: "integer"
        format: "int64"
      image:
        type: "integer"
        format: "int64"
      movie_types_id:
        type: "integer"
        format: "int64"
      netflix_id:
        type: "integer"
        format: "int64"
    xml:
      name: "movies"
  recommandation:
    type: "object"
    properties:
      idReco:
        type: "integer"
        format: "int64"
      thumb_X:
        type: "integer"
        format: "int64"
      thumb_Y:
        type: "integer"
        format: "int64"
      thumb_Z:
        type: "integer"
        format: "int64"
      id:
        items:
          $ref: "#/definitions/movies"
      UUID:
        items:
          $ref: "#/definitions/account"
    xml:
      name: "reco"
        
  consumption:
    type: "object"
    properties:
      idConso:
        type: "integer"
        format: "int64"
      date_conso:
        type: "string"
        format: "datetime"
      id:
        items:
          $ref: "#/definitions/movies"
      UUID:
        items:
          $ref: "#/definitions/account"
    xml:
      name: "conso"
        

  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"